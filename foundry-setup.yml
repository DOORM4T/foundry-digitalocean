- become: yes
  hosts: all
  name: foundry-setup
  tasks:
    - name: Make sure we have a 'sudo' group
      group:
        name: sudo
        state: present

    - name: Allow 'sudo' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: "^%sudo"
        line: "%sudo ALL=(ALL) NOPASSWD: ALL"
        validate: "visudo -cf %s"

    - name: Add sudoers users to sudo group
      user:
        name: foundry-user
        groups: sudo
        append: yes
        state: present
        createhome: yes

    - name: Add SSH key to 'foundry-user'
      authorized_key:
        user: foundry-user
        state: present
        key: "{{ lookup('file', pub_key) }}"

    - name: apt update
      become: yes
      shell: sudo apt update;

    - name: Install python3
      become: yes
      shell: sudo apt install python3 -y;

    - name: Install zip & unzip
      become: yes
      shell: sudo apt install zip unzip -y;

    - name: UFW Allow 80/tcp for Certbot
      become: yes
      shell: sudo ufw allow 80/tcp;

    - name: UFW Allow 443/tcp for Foundry
      become: yes
      shell: sudo ufw allow 443/tcp;

    - name: Create Foundry data directory structure
      ansible.builtin.file:
        path: /home/foundry-user/foundry/data/Config
        state: directory

    - name: Copy foundry data directory zip to foundry data directory
      ansible.builtin.copy:
        src: "{{ existing_foundry_zip_data_path }}"
        dest: /home/foundry-user/foundry
        owner: foundry-user
        mode: "0644"
      when: existing_foundry_zip_data_path is defined

    - name: unzip existing foundry zip into /home/foundry-user/foundry/data
      # Foundry .zip file should have the Config/ and Data/ directories at its root level when zipped.
      # This way, we can unzip -d those contents directly to /home/foundry-user/foundry/data
      become: yes
      shell: |
        data_zip_basename=`basename {{ existing_foundry_zip_data_path }}`;
        unzip -d /home/foundry-user/foundry/data "/home/foundry-user/foundry/$data_zip_basename";
      when: existing_foundry_zip_data_path is defined

    - name: Install certbot
      become: yes
      shell: sudo apt install certbot -y

    - name: Certbot generate SSL certificate
      become: yes
      shell: |
        sudo certbot register  --agree-tos --register-unsafely-without-email; \
        sudo certbot certonly --standalone -d '{{ subdomain_name }}.{{ domain_name }}' --non-interactive;

    - name: Wait until the SSL certificate files are present before continuing
      ansible.builtin.wait_for:
        path: /etc/letsencrypt/live/{{ subdomain_name }}.{{ domain_name }}/fullchain.pem

    - name: Copy SSL certificate files to the Foundry data/Config directory
      # This way, the SSL certificate files be available to the the Foundry container, which will bind /home/foundry-user/foundry/data/ to the container's /data folder
      become: yes
      shell: |
        cp /etc/letsencrypt/live/{{ subdomain_name }}.{{ domain_name }}/fullchain.pem \
           /etc/letsencrypt/live/{{ subdomain_name }}.{{ domain_name }}/privkey.pem \
           /home/foundry-user/foundry/data/Config

    - name: chmod a+r the SSL certificates so the Docker container can read them
      become: yes
      shell: |
        chmod a+r /home/foundry-user/foundry/data/Config/*.pem

    - name: Copy custom Foundry Docker image tar.gz file to remote
      ansible.builtin.copy:
        src: ./my-image.tar.gz
        dest: /home/foundry-user/foundry/
        owner: foundry-user
        mode: "0644"

    - name: Load custom Foundry Docker image from the uploaded tar.gz file
      become: yes
      shell: |
        sudo docker load -i /home/foundry-user/foundry/my-image.tar.gz

    - name: Run Foundry
      become: yes
      shell: |
        sudo docker run \
           -e CONTAINER_CACHE='foundryvtt-10.291.zip' \
           -e FOUNDRY_SSL_CERT=/data/Config/fullchain.pem \
           -e FOUNDRY_SSL_KEY=/data/Config/privkey.pem \
           -v /home/foundry-user/foundry/data:/data \
           -p 443:30000 \
           --name foundryvtt \
           --restart unless-stopped \
           -d \
           my-foundryvtt:10.291.0
    #     sudo docker run \
    #        -e CONTAINER_CACHE='foundryvtt-10.291.zip' \
    #        -v /home/foundry-user/foundry/data:/data \
    #        -p 80:30000 \
    #        --name foundryvtt \
    #        --restart unless-stopped \
    #        -d \
    #        my-foundryvtt:10.291.0
